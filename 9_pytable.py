# this program is used to fill the attribute table of the roads generated by 
# prmachine using the file name 
#
ID = ""#name of road 
B_node = ""# starting pr + surpus 
E_node = ""# ending pr + surplus 
Road_name = "" # a0001
F_plan = 5 # 1 if direction = 1
B_plan = 5 # 1 if direction = 2
PARAMETERS = []
def trimmer(): # removes useless letters at the start
    global name 
    global name1
    global PARAMETERS 
    name1 = name # saved for later 
    # replace keywords with commas 
    name = name.replace("_RTE",",")
    name = name.replace("_S",",")
    name = name.replace("_PRD",",")
    name = name.replace("absd",",")
    name = name.replace("_PRF",",")
    name = name.replace("absf",",")
    name = name+"," # add comma at the end in cas thers an argument 
    PARAMETERS = name.split(",")
    PARAMETERS.pop(0)#remove useless string at the start 
    PARAMETERS.pop()# if no argument removes last item 
    PARAMETERS.insert(0,name1)# insert initial name of road into parameters
    print (PARAMETERS)
# step 0: handle imports 
import processing 
# step 1: get the name of the file 
layer = iface.activeLayer() # uses selected layer as input
name = str(layer.name())
name1 = "" # name with useless parts removed by trim fuction 
# step 2: remove the useless letters at the start of the string
trimmer() 
print(name)
ID = PARAMETERS[0]
if PARAMETERS[2]=='1':
    F_plan = 1 # 1 if direction = 1
    B_plan = 0 # 1 if direction = 2
elif PARAMETERS[2]=='2':
    F_plan = 0 # 1 if direction = 1
    B_plan = 1 # 1 if direction = 2
else :
    F_plan = 8 # 1 if direction = 1
    B_plan = 8
B_node = str(int(PARAMETERS[3])*1000 + int(PARAMETERS[4]))
E_node = str(int(PARAMETERS[5])*1000 + int(PARAMETERS[6]))
Road_name = PARAMETERS[1]
print ("==========================")
print ("ID = "+ ID)
print ("B_node = "+ str(B_node)) 
print ("E_node = "+ str(E_node)) 
print ("Road_name: "+Road_name) 
print ("F Plan: "+str(F_plan))
print ("B_Plan: "+str(B_plan)) 

# generate shapefiles with this in the atribute table 
# https://opensourceoptions.com/blog/pyqgis-calculate-geometry-and-field-values-with-the-qgis-python-api/

pv = layer.dataProvider()
# adding new fields 
pv.addAttributes([
QgsField('ID', QVariant.String),
QgsField('B_node', QVariant.String),
QgsField('E_node', QVariant.String),
QgsField('Road_name', QVariant.String),
QgsField('F plan', QVariant.String),
QgsField('B plan', QVariant.String)
])
layer.updateFields()# so the changes can take affect 
with edit(layer):
    for f in layer.getFeatures():
        f['ID'] = ID
        f['B_node'] = B_node
        f['E_node'] = E_node
        f['Road_name'] = Road_name
        f['F plan'] = F_plan
        f['B plan'] = B_plan
        layer.updateFeature(f)